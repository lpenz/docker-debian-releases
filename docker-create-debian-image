#!/bin/bash

set -e -o pipefail

usage="Usage: $0 [-h] [-k] [-i <image name>] [-q] [-m <mirror>/debian/ubuntu...] [-p <vars file>] [-t <variant>] [distribution [architecture]]"

keepdir=false
qemu=false
mirrorCandidates=()
raspbian=false
rpios=false
ubuntu=false

while getopts ":ki:qm:t:h" opt; do
    case "$opt" in
    k) keepdir=true ;;
    i) image="$OPTARG" ;;
    q) qemu=true ;;
    m)
        os="$OPTARG"
        if [ "$OPTARG" = "debian" ]; then
            mirrorCandidates+=("http://deb.debian.org/debian")
            mirrorCandidates+=("http://archive.debian.org/debian")
        elif [ "$OPTARG" = "ubuntu" ]; then
            mirrorCandidates+=("http://ports.ubuntu.com/ubuntu-ports")
            mirrorCandidates+=("http://archive.ubuntu.com/ubuntu")
            mirrorCandidates+=("http://old-releases.ubuntu.com/ubuntu")
            ubuntu=true
        elif [ "$OPTARG" = "raspbian" ]; then
            mirrorCandidates+=("http://raspbian.raspberrypi.org/raspbian")
            mirrorCandidates+=("http://archive.raspbian.org/raspbian")
            raspbian=true
        elif [ "$OPTARG" = "rpios" ]; then
            mirrorCandidates+=("http://deb.debian.org/debian")
            mirrorCandidates+=("http://archive.debian.org/debian")
            mirrorCandidates+=("http://archive.raspberrypi.org/debian")
            rpios=true
        elif [ "$OPTARG" = "devuan" ]; then
            mirrorCandidates+=("http://deb.devuan.org/merged")
            mirrorCandidates+=("http://deb.devuan.org/devuan")
        else
            mirrorCandidates+=("$OPTARG")
        fi
        ;;
    t) variant="$OPTARG" ;;
    h)
        echo "$usage"
        exit 0
        ;;
    \?)
        printf "Invalid argument\\n%s\\n" "$usage" >&2
        exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

dist=${1-jessie}
arch=${2-amd64}

if [ "${#mirrorCandidates[@]}" -eq 0 ]; then
    mirrorCandidates+=("http://archive.debian.org/debian")
    mirrorCandidates+=("http://deb.debian.org/debian")
fi

for m in "${mirrorCandidates[@]}"; do
    if curl -sfL "${m}/dists/${dist}/main/binary-${arch}/Release" >/dev/null; then
        mirror="$m"
        break
    fi
done

if [ -z "$mirror" ]; then
    echo "Architecture $arch not suported by $dist in any mirror" >&2
    exit 1
fi

# Create tmp dir, setup cleanup:
dir="$(mktemp -d --suffix=-rootfs -p "$PWD")"
function cleanup {
    sudo umount -l "$dir/sys" "$dir/proc" 2>/dev/null || :
    if ! "$keepdir"; then
        sudo rm -rf "$dir"
    fi
}
trap cleanup EXIT

# Build debootstrap command-line
image=${image-"${os}-${dist}-${arch}"}
name=${image##*/}

cmd=(sudo)
if "$qemu"; then
    cmd+=(qemu-debootstrap)
else
    cmd+=(debootstrap)
fi
if [ -n "$variant" ]; then
    cmd+=("--variant=$variant")
fi
cmd+=("--no-check-gpg" "--arch=$arch" "$dist" "$dir")
cmd+=("$mirror")

# Run:

set -x

: name="$name", image="$image", mirror="$mirror"

if ! [ -f "/usr/share/debootstrap/scripts/$dist" ]; then
    sudo cp -v "/usr/share/debootstrap/scripts/$os" "/usr/share/debootstrap/scripts/$dist"
fi

sudo chown root:root "$dir"
if ! "${cmd[@]}"; then
    sudo cat "$dir/debootstrap/debootstrap.log"
    false
fi

if "$ubuntu"; then
    # Add universe repo to ubuntu to make more packages available
    sudo sed -i 's/ main/ main universe/' "$dir/etc/apt/sources.list"
fi

if "$rpios"; then
    # RPI OS needs an additional file in /etc/apt/sources.list.d
    echo "deb http://archive.raspberrypi.org/debian/ $dist main" | sudo tee "$dir/etc/apt/sources.list.d/raspi.list"
    # Install the key
    sudo cp raspberrypi.gpg "$dir/etc/apt/trusted.gpg.d/raspberrypi-archive-stable.gpg"
    # Install rpios replacement packages
    sudo chroot "$dir" dpkg --add-architecture armhf
fi

if "$raspbian"; then
    # Raspbian needs a fixed source.list
    echo "deb http://raspbian.raspberrypi.org/raspbian/ $dist main contrib non-free rpi firmware" | sudo tee "$dir/etc/apt/sources.list"
fi

sudo chroot "$dir" apt-get update
sudo chroot "$dir" apt-get -y upgrade

# Create description:
for releasefile in $(sudo find "$dir/var" -path '*/apt/lists/*_Release'); do
    release_description=$(sudo sed -n 's@^Description: \(.*\)$@\1@p' "$releasefile")
    description="${release_description}"
    break
done
if [ -n "$description" ]; then
    if ! [[ "$description" == *"$arch"* ]]; then
        description+=" for $arch"
    fi
else
    if [ -f "$dir/usr/lib/os-release" ]; then
        cat "$dir/usr/lib/os-release"
        # shellcheck disable=SC1090
        . "$dir/usr/lib/os-release"
    elif [ -f "$dir/etc/os-release" ]; then
        cat "$dir/etc/os-release"
        # shellcheck disable=SC1090
        . "$dir/etc/os-release"
    fi
    if [ -n "$PRETTY_NAME" ]; then
        description="$PRETTY_NAME for $arch"
    else
        description="$name"
    fi
fi
if [ -n "$variant" ] && [ "$description" != "$name" ]; then
    description+=", $variant variant"
fi

# Remove apt lists (too big):
if [ -d "$dir/var/lib/apt/lists" ]; then
    sudo find "$dir/var/lib/apt/lists" -type f -delete
elif [ -d "$dir/var/lib/apt/lists" ]; then
    sudo find "$dir/var/state/apt/lists" -type f -delete
fi

if [ -f "$dir/etc/apt/sources.list" ]; then
    # Show apt sources.list for debugging purposes
    cat "$dir/etc/apt/sources.list"
fi

# Create .tar and import docker image:
sudo tar -C "$dir" -c . |
    docker import \
        -m "$description" \
        -c 'CMD ["bash"]' \
        - "$image"
# Fix architecture in json inside tar
imagetar="${image##*/}.tar"
docker save "$image" >"${imagetar}.tmp"
docker rmi "$image"
./docker-manifest-set-arch "$arch" "${imagetar}.tmp" "${imagetar}"
docker load --input "${imagetar}"
# Test
docker run --rm "$image" /bin/bash -c "true"
docker run --rm "$image" uname -a
docker inspect "$image"

# github action output
echo "description=$description" >>"$GITHUB_OUTPUT"
